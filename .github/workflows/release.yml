name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  issues: write
  pull-requests: write

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version from tag
        id: get_version
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Generate release notes
        id: generate_notes
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          echo "Generating release notes for version $VERSION"
          
          # Extract changelog for this version
          if [ -f "CHANGELOG.md" ]; then
            sed -n "/^## \[$VERSION\]/,/^## \[.*\]/p" CHANGELOG.md | sed '$d' > release_notes.md
          else
            echo "# Release $VERSION" > release_notes.md
            echo "" >> release_notes.md
            echo "- Version bump to $VERSION" >> release_notes.md
          fi
          
          # Show the release notes
          echo "Release notes content:"
          cat release_notes.md

      - name: Create Release
        id: create_release
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          gh release create "v$VERSION" \
            --title "Release v$VERSION" \
            --notes-file release_notes.md \
            --latest
          
          # Get the upload URL for compatibility with existing jobs
          UPLOAD_URL=$(gh api repos/${{ github.repository }}/releases/tags/v$VERSION --jq '.upload_url')
          echo "upload_url=$UPLOAD_URL" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-and-upload:
    name: Build and Upload
    needs: create-release
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: dui
            asset_name: dui-linux-x86_64
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            artifact_name: dui
            asset_name: dui-linux-x86_64-musl
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: dui
            asset_name: dui-macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: dui
            asset_name: dui-macos-aarch64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: dui.exe
            asset_name: dui-windows-x86_64.exe
    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross (for cross-compilation)
        if: matrix.os == 'ubuntu-latest' && matrix.target != 'x86_64-unknown-linux-gnu'
        run: cargo install cross

      - name: Build binary
        run: |
          if [ "${{ matrix.os }}" = "ubuntu-latest" ] && [ "${{ matrix.target }}" != "x86_64-unknown-linux-gnu" ]; then
            cross build --release --target ${{ matrix.target }}
          else
            cargo build --release --target ${{ matrix.target }}
          fi
        shell: bash

      - name: Strip binary (Linux and macOS)
        if: matrix.os != 'windows-latest'
        run: strip target/${{ matrix.target }}/release/${{ matrix.artifact_name }}

      - name: Calculate SHA256
        id: sha256
        run: |
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            SHA256=$(certutil -hashfile target/${{ matrix.target }}/release/${{ matrix.artifact_name }} SHA256 | head -2 | tail -1)
          else
            SHA256=$(shasum -a 256 target/${{ matrix.target }}/release/${{ matrix.artifact_name }} | cut -d ' ' -f 1)
          fi
          echo "sha256=$SHA256" >> $GITHUB_OUTPUT
          echo "SHA256: $SHA256"
        shell: bash

      - name: Upload Release Asset
        run: |
          VERSION="${{ needs.create-release.outputs.version }}"
          # Remove existing asset if it exists to avoid conflicts
          gh release delete-asset "v$VERSION" "${{ matrix.asset_name }}" --yes || true
          # Copy the binary with the desired asset name for proper uploading
          cp "target/${{ matrix.target }}/release/${{ matrix.artifact_name }}" "${{ matrix.asset_name }}"
          gh release upload "v$VERSION" "${{ matrix.asset_name }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-cargo:
    name: Publish to crates.io
    needs: create-release
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Login to crates.io
        run: cargo login ${{ secrets.CARGO_TOKEN }}

      - name: Publish to crates.io
        run: cargo publish --dry-run && cargo publish

  update-homebrew-formula:
    name: Update Homebrew Formula
    needs: [create-release, build-and-upload]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get release assets
        id: get_assets
        run: |
          VERSION="${{ needs.create-release.outputs.version }}"
          echo "Getting SHA256 hashes for release assets..."
          
          # Download the source archive and calculate its SHA256
          wget -q "https://github.com/${{ github.repository }}/archive/refs/tags/v$VERSION.tar.gz" -O "dui-$VERSION.tar.gz"
          SOURCE_SHA256=$(shasum -a 256 "dui-$VERSION.tar.gz" | cut -d ' ' -f 1)
          
          echo "source_sha256=$SOURCE_SHA256" >> $GITHUB_OUTPUT
          echo "Source SHA256: $SOURCE_SHA256"

      - name: Update Homebrew Formula
        run: |
          VERSION="${{ needs.create-release.outputs.version }}"
          SOURCE_SHA256="${{ steps.get_assets.outputs.source_sha256 }}"
          
          # Update the formula
          sed -i "s/refs\/tags\/v[0-9]\+\.[0-9]\+\.[0-9]\+/refs\/tags\/v$VERSION/g" Formula/dui.rb
          sed -i "s/sha256 \"[a-f0-9]\{64\}\"/sha256 \"$SOURCE_SHA256\"/g" Formula/dui.rb
          
          echo "Updated Homebrew formula:"
          cat Formula/dui.rb

      - name: Commit and push formula update
        run: |
          VERSION="${{ needs.create-release.outputs.version }}"
          
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          if git diff --quiet; then
            echo "No changes to commit"
          else
            git add Formula/dui.rb
            git commit -m "chore: update Homebrew formula for v$VERSION"
            git push
          fi

  post-release:
    name: Post-Release Tasks
    needs: [create-release, build-and-upload, publish-cargo, update-homebrew-formula]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create release summary
        run: |
          VERSION="${{ needs.create-release.outputs.version }}"
          echo "# Release Summary for v$VERSION" > release_summary.md
          echo "" >> release_summary.md
          echo "## ✅ Completed Tasks" >> release_summary.md
          
          # Check job results
          if [ "${{ needs.create-release.result }}" = "success" ]; then
            echo "- ✅ Created GitHub release" >> release_summary.md
          else
            echo "- ❌ Failed to create GitHub release" >> release_summary.md
          fi
          
          if [ "${{ needs.build-and-upload.result }}" = "success" ]; then
            echo "- ✅ Built and uploaded binaries" >> release_summary.md
          else
            echo "- ❌ Failed to build/upload binaries" >> release_summary.md
          fi
          
          if [ "${{ needs.publish-cargo.result }}" = "success" ]; then
            echo "- ✅ Published to crates.io" >> release_summary.md
          else
            echo "- ❌ Failed to publish to crates.io" >> release_summary.md
          fi
          
          if [ "${{ needs.update-homebrew-formula.result }}" = "success" ]; then
            echo "- ✅ Updated Homebrew formula" >> release_summary.md
          else
            echo "- ❌ Failed to update Homebrew formula" >> release_summary.md
          fi
          
          echo "" >> release_summary.md
          echo "## 📦 Release Assets" >> release_summary.md
          echo "- Linux x86_64 (GNU)" >> release_summary.md
          echo "- Linux x86_64 (musl)" >> release_summary.md
          echo "- macOS x86_64" >> release_summary.md
          echo "- macOS aarch64 (Apple Silicon)" >> release_summary.md
          echo "- Windows x86_64" >> release_summary.md
          
          echo "" >> release_summary.md
          echo "## 🚀 Installation" >> release_summary.md
          echo "\`\`\`bash" >> release_summary.md
          echo "# Via Cargo" >> release_summary.md
          echo "cargo install dui-cli" >> release_summary.md
          echo "" >> release_summary.md
          echo "# Via Homebrew" >> release_summary.md
          echo "brew install ukhan1219/dui/dui" >> release_summary.md
          echo "\`\`\`" >> release_summary.md
          
          cat release_summary.md

      - name: Clean up release notes file
        run: |
          rm -f release_notes_*.md
          echo "Cleaned up temporary release notes files"